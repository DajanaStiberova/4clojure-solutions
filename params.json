{"name":"The Wanna be Clojure Girl ..","tagline":"","body":"#4clojure solutions\r\n\r\n#####Problem 1\r\nNothing but the Truth\r\n```clojure\r\n(= 1 1)\r\n```\r\n\r\n#####Problem 2\r\nSimple Math\r\n```clojure\r\n4\r\n```\r\n\r\n#####Problem 3\r\nIntro to Strings\r\n```clojure\r\n\"HELLO WORLD\"\r\n```\r\n#####Problem 4\r\nIntro to Lists\r\n```clojure\r\n :a :b :c\r\n```\r\n\r\n#####Problem 5\r\nLists: conj\r\n```clojure\r\n'(1 2 3 4)\r\n```\r\n\r\n#####Problem 6\r\nIntro to Vectors\r\n```clojure\r\n :a :b :c\r\n```\r\n\r\n#####Problem 7\r\nVectors: conj\r\n```clojure\r\n [1 2 3 4]\r\n```\r\n\r\n#####Problem 8\r\nIntro to Sets\r\n```clojure\r\n #{:a :b :c :d}\r\n```\r\n\r\n#####Problem 9\r\nSets: conj\r\n```clojure\r\n 2\r\n```\r\n\r\n#####Problem 10\r\nIntro to Maps\r\n```clojure\r\n 20\r\n```\r\n\r\n#####Problem 11\r\nMaps: conj\r\n```clojure\r\n [:b 2]\r\n```\r\n\r\n#####Problem 12\r\nIntro to Sequences\r\n```clojure\r\n 3\r\n```\r\n\r\n#####Problem 13\r\nSequences: rest\r\n```clojure\r\n '(20 30 40)\r\n```\r\n\r\n#####Problem 14\r\nIntro to Functions\r\n```clojure\r\n 8\r\n```\r\n\r\n#####Problem 15\r\nDouble Down\r\n```clojure\r\n #(* 2 %)\r\n```\r\n\r\n#####Problem 16\r\nHello World\r\n```clojure\r\n #(str \"Hello, \" % \"!\")\r\n```\r\n\r\n#####Problem 17\r\nSequences: map\r\n```clojure\r\n'(6 7 8)\r\n```\r\n\r\n#####Problem 18\r\nSequences: filter\r\n```clojure\r\n'(6 7)\r\n```\r\n\r\n#####Problem 19\r\nLast Element\r\n```clojure\r\n#(first (reverse %))\r\n```\r\n\r\n#####Problem 20\r\nPenultimate Element\r\n```clojure\r\n#(second (reverse %))\r\n```\r\n\r\n#####Problem 21\r\nNth Element\r\n```clojure\r\n#(get (vec %1) %2)\r\n```\r\n\r\n#####Problem 22\r\nCount a Sequence\r\n```clojure\r\n#(reduce (fn [acc x]\r\n                  (inc acc))\r\n              0 %)\r\n```\r\n\r\n#####Problem 23\r\nReverse a Sequence\r\n```clojure\r\n#(reduce (fn [acc x]\r\n            (cons x acc)) \r\n            (empty %) %)\r\n```\r\n\r\n#####Problem 24\r\nSum It All Up\r\n```clojure\r\n#(apply + %)\r\n```\r\n\r\n#####Problem 25\r\nFind the odd numbers\r\n```clojure\r\n#(reverse (reduce (fn [acc x]\r\n                         (if (odd? x)\r\n                           (conj acc x)\r\n                           acc))\r\n                       '() %))\r\n```\r\n\r\n#####Problem 26\r\nFibonacci Sequence\r\n```clojure\r\n#(loop [x [1 1]]                                                                    \r\n        (if (= (count x) %)                                             \r\n          x                                                                               \r\n          (recur (conj x (apply + (take 2 (reverse x)))))))\r\n```\r\n\r\n\r\n#####Problem 27\r\nPalindrome Detector\r\n```clojure\r\n(if (string? %)\r\n   (= (clojure.string/reverse %) %) \r\n   (= (reverse %) %))\r\n```\r\n\r\n#####Problem 28\r\nFlatten a Sequence\r\n```clojure\r\n#(reverse (reduce\r\n                (fn rec-flatten [acc item]\r\n                  (if (coll? item) (reduce rec-flatten acc item)\r\n                      (conj acc item)))\r\n                '()\r\n                %))\r\n```\r\n\r\n#####Problem 29\r\nGet the Caps\r\n```clojure\r\n#(apply str(filter (set (map char (range 65 91))) %)) \r\n```\r\n\r\n#####Problem 30\r\nCompress a Sequence\r\n```clojure\r\n#(map first (partition-by identity %))  \r\n```\r\n\r\n#####Problem 31\r\nPack a Sequence\r\n```clojure\r\n#(partition-by identity %)  \r\n```\r\n\r\n#####Problem 32 \r\nDuplicate a Sequence\r\n```clojure\r\n#(seq (reduce (fn [acc item]                                                         \r\n                     (-> acc                                                              \r\n                         (conj item)                                                      \r\n                         (conj item)))                                                    \r\n                  [] %)) \r\n```\r\n\r\n#####Problem 33 \r\nReplicate a Sequence\r\n```clojure\r\n#(mapcat (fn [item]                                                      \r\n             (take %2 (repeat item)))                                              \r\n          %1) \r\n```\r\n\r\n#####Problem 34\r\nImplement range\r\n```clojure\r\n#(take (- %2 %1) (iterate inc %1))\r\n```\r\n\r\n#####Problem 35\r\nLocal bindings\r\n```clojure\r\n7\r\n```\r\n\r\n#####Problem 36\r\nLet it Be\r\n```clojure\r\n[x 7 y 3 z 1]\r\n```\r\n\r\n#####Problem 37\r\nRegular Expressions\r\n```clojure\r\n\"ABC\"\r\n```\r\n\r\n#####Problem 38\r\nMaximum value\r\n```clojure\r\n(fn [& args]\r\n  (last (sort args)))\r\n```\r\n\r\n#####Problem 39\r\nInterleave Two Seqs\r\n```clojure\r\n#(flatten (map (fn [f s]\r\n                      (conj '() s f))\r\n                    %1 %2))\r\n```\r\n\r\n#####Problem 40\r\nInterpose a Seq\r\n```clojure\r\n#(take (- (* 2 (count %2)) 1)\r\n       (interleave %2 (repeat %1)))\r\n```\r\n\r\n#####Problem 41\r\nDrop Every Nth Item\r\n```clojure\r\n#(mapcat (fn [a] \r\n           (take (- %2 1) a)) \r\n         (partition-all %2 %1))\r\n```\r\n\r\n#####Problem 42\r\nFactorial Fun\r\n```clojure\r\n#(apply * (range 1 (+ 1 %)))\r\n```\r\n\r\n#####Problem 45\r\nIntro to Iterate\r\n```clojure\r\n'(1 4 7 10 13)\r\n```\r\n\r\n#####Problem 47\r\nContain Yourself\r\n```clojure\r\n4\r\n```\r\n\r\n#####Problem 48\r\nIntro to some\r\n```clojure\r\n6\r\n```\r\n\r\n#####Problem 49\r\nSplit a sequence\r\n```clojure\r\n#(vector (take %1 %2) (drop %1 %2))\r\n```\r\n\r\n#####Problem 51\r\nAdvanced Destructuring\r\n```clojure\r\n[1 2 3 4 5]\r\n```\r\n\r\n\r\n#####Problem 52\r\nIntro to some\r\n```clojure\r\n[c e]\r\n```\r\n\r\n#####Problem 57\r\nSimple Recursion\r\n```clojure\r\n'(5 4 3 2 1)\r\n```\r\n\r\n#####Problem 61\r\nMap Construction\r\n```clojure\r\n#(apply merge (map (fn [k v]\r\n                           {k v})\r\n                         %1\r\n                         %2))\r\n```\r\n\r\n#####Problem 62\r\nRe-implement Iterate\r\n```clojure\r\n(fn my-iterate [fnc x]\r\n        (cons x (lazy-seq (my-iterate fnc (fnc x)))))\r\n```\r\n\r\n#####Problem 63\r\nGroup a Sequence\r\n```clojure\r\n#(apply merge-with concat \r\n       (map (fn [item] \r\n              (hash-map (%1 item) [item]))\r\n        %2))\r\n```\r\n\r\n#####Problem 64\r\nIntro to reduce\r\n```clojure\r\n+\r\n```\r\n\r\n#####Problem 66\r\nGreatest Common Divisor\r\n```clojure\r\n#(loop [a (max %1 %2)\r\n        b (min %1 %2)\r\n        r (rem a b)]\r\n   (if (= r 0)\r\n     b\r\n     (recur b r (rem b r))))\r\n```\r\n\r\n#####Problem 68\r\nRecurring Theme\r\n```clojure\r\n[7 6 5 4 3]\r\n```\r\n\r\n#####Problem 71\r\nRearranging Code: ->\r\n```clojure\r\nlast\r\n```\r\n\r\n#####Problem 72\r\nRearranging Code: ->>\r\n```clojure\r\nreduce +\r\n```\r\n\r\n#####Problem 81\r\nSet Intersection\r\n```clojure\r\n#(apply sorted-set \r\n        (filter \r\n         (fn [x] \r\n           (contains? %1 x)) \r\n         %2)) \r\n```\r\n\r\n#####Problem 83\r\nA Half-Truth\r\n```clojure\r\n(fn [& args]\r\n  (and (contains? (set args) false)\r\n       (contains? (set args) true))) \r\n```\r\n\r\n#####Problem 88\r\nSymmetric Difference\r\n```clojure\r\n#(set (concat (apply disj %1 %2) (apply disj %2 %1)))\r\n```\r\n\r\n#####Problem 90\r\nCartesian Product\r\n```clojure\r\n#(set \r\n  (for [x %1\r\n        y %2]\r\n   [x y]))\r\n```\r\n\r\n#####Problem 99\r\nProduct Digits\r\n```clojure\r\n#(->> (* %1 %2)\r\n      str\r\n      seq\r\n      (map (comp read-string str)))\r\n```\r\n\r\n\r\n#####Problem 107\r\nSimple closures\r\n```clojure\r\n#(fn [y]\r\n    (apply * (repeat % y))) \r\n```\r\n\r\n#####Problem 122\r\nRead a binary number\r\n```clojure\r\n(fn [s] \r\n  (apply + (map (fn [x]\r\n                    (apply * (repeat x 2)))\r\n                (keep-indexed #(if (= 1 %2) %1) \r\n                              (mapv (comp read-string str) (reverse s))))))\r\n```\r\n\r\n#####Problem 134\r\nA nil key\r\n```clojure\r\n(fn [k m]\r\n (and (contains? m k)\r\n      (nil? (m k))))\r\n```\r\n\r\n#####Problem 145\r\nFor the win\r\n```clojure\r\n'(1 5 9 13 17 21 25 29 33 37)\r\n```\r\n\r\n#####Problem 156\r\nMap Defaults\r\n```clojure\r\n#(zipmap %2 (repeat %1))\r\n```\r\n\r\n#####Problem 161\r\nSubset and Superset\r\n```clojure\r\n#{1 2}\r\n```\r\n\r\n#####Problem 162\r\nLogical falsity and truth\r\n```clojure\r\n1\r\n```\r\n\r\n#####Problem 166\r\nComparisons\r\n```clojure\r\n#(cond\r\n  (%1 %2 %3) :lt\r\n  (%1 %3 %2) :gt\r\n  :else :eq)\r\n```\r\n","google":"<script>   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-68914264-1', 'auto');   ga('send', 'pageview');  </script>","note":"Don't delete this file! It's used internally to help with page regeneration."}